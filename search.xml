<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>字符集&amp;字符编码以及PHP中的一些转码方法</title>
    <url>/2018/07/15/Charater%20set-PHP/</url>
    <content><![CDATA[<p>在重写一些老的项目的时候，有可能会遇到这种情况</p>
<p>¾ÍÒµÖ¸µ¼ÖÐÐÄ2010Äêº®¼Ù·Å¼ÙÍ¨Öª</p>
<p>�����˵�λ�������</p>
<p>???</p>
<p>这就是传说中的乱码，要想处理乱码，得先了解字符集&amp;字符编码。</p>
<h2 id="字符集-编码">字符集&amp;编码</h2>
<p>计算机中储存的信息都是用二进制数表示的；我们直接看到的英文、汉字等字符是二进制数转换之后的结果。通俗的说，按照何种规则将字符存储在计算机中，如’a’用什么表示，称为&quot;编码&quot;；反之，将存储在计算机中的二进制数解析显示出来，称为&quot;解码&quot;。</p>
<p>在解码过程中，如果使用了错误的解码规则，则导致’a’解析成’b’或者乱码。</p>
<p><strong>字符集（Charset）</strong>：是一个系统支持的所有抽象字符的集合。字符是各种文字和符号的总称，包括各国家文字、标点符号、图形符号、数字等。</p>
<p><strong>字符编码（Character Encoding）</strong>：是一套法则，使用该法则能够对自然语言的字符的一个集合（如字母表或音节表），与其他东西的一个集合（如号码或电脉冲）进行配对。即在符号集合与数字系统之间建立对应关系，它是信息处理的一项基本技术。通常人们用符号集合（一般情况下就是文字）来表达信息。而以计算机为基础的信息处理系统则是利用元件（硬件）不同状态的组合来存储和处理信息的。元件不同状态的组合能代表数字系统的数字，因此字符编码就是将符号转换为计算机可以接受的数字系统的数，称为数字代码。</p>
<h3 id="常用的字符集">常用的字符集</h3>
<p><strong>常见的字符集</strong>：ASCII字符集，ISO8859-1字符集， GB2312字符集， GBK字符集，BIG5字符集、GB18030字符集、Unicode字符集等</p>
<h3 id="ASII字符集-编码">ASII字符集&amp;编码</h3>
<p><strong>ASCII</strong>（<strong>A</strong>merican <strong>S</strong>tandard <strong>C</strong>ode for <strong>I</strong>nformation <strong>I</strong>nterchange，<strong>美国信息交换标准代码</strong>）是基于拉丁字母的一套电脑编码系统。它主要用于显示现代英语，而其扩展版本EASCII则可以勉强显示其他西欧语言。它是现今最通用的单字节编码系统（但是有被Unicode追上的迹象），并等同于国际标准<strong>ISO/IEC 646</strong>。</p>
<p><strong>ASCII字符集</strong>：主要包括控制字符（回车键、退格、换行键等）；可显示字符（英文大小写字符、阿拉伯数字和西文符号）。</p>
<p><strong>ASCII编码</strong>：将ASCII字符集转换为计算机可以接受的数字系统的数的规则。使用7位（bits）表示一个字符，共128字符；但是7位编码的字符集只能支持128个字符，为了表示更多的欧洲常用字符对ASCII进行了扩展， <em><strong>ASCII扩展字符集使用8位（bits）表示一个字符，共256字符。</strong></em></p>
<p><strong>缺点</strong>: 只能用显示26个基本拉丁字母，阿拉伯数字和英式标点符号。只能用于现代英语。EASCII解决了部分西欧语言的问题。</p>
<h3 id="ISO-8859-1字符集-编码">ISO-8859-1字符集&amp;编码</h3>
<p>ISO-8859-1编码是<strong>单字节编码，向下兼容ASCII</strong>，其编码范围是0x00-0xFF，0x00-0x7F之间完全和ASCII一致，0x80-0x9F之间是控制字符，0xA0-0xFF之间是文字符号。</p>
<p>此字符集支持部分于欧洲使用的语言，包括阿尔巴尼亚语、巴斯克语、布列塔尼语、加泰罗尼亚语、丹麦语、荷兰语、法罗语、弗里西语、加利西亚语、德语、格陵兰语、冰岛语、爱尔兰盖尔语、意大利语、拉丁语、卢森堡语、挪威语、葡萄牙语、里托罗曼斯语、苏格兰盖尔语、西班牙语及瑞典语。</p>
<p><strong>Latin1是ISO-8859-1的别名</strong>，有些环境下写作Latin-1。</p>
<h3 id="GBXXXX字符集-编码">GBXXXX字符集&amp;编码</h3>
<p><strong>编码规则</strong>:将127号之后的奇异符号们（即EASCII）取消，规定：一个小于127的字符的意义与原来相同，但两个大于127的字符连在一起时，就表示一个汉字，前面的一个字节（他称之为高字节）从0xA1用到 0xF7，后面一个字节（低字节）从0xA1到0xFE，这样我们就可以组合出大约7000多个简体汉字了。在这些编码里，还把数学符号、罗马希腊的 字母、日文的假名们都编进去了，连在ASCII里本来就有的数字、标点、字母都统统重新编了两个字节长的编码，这就是常说的&quot;全角&quot;字符，而原来在127号以下的那些就叫&quot;半角&quot;字符了。</p>
<p><strong>GB2312</strong>。<strong>GB2312</strong>或<strong>GB2312-80</strong>是中国国家标准简体中文字符集，全称《<strong>信息交换用汉字编码字符集·基本集</strong>》，又称<strong>GB0</strong>，由中国国家标准总局发布，1981年5月1日实施。GB2312编码通行于中国大陆；新加坡等地也采用此编码。中国大陆几乎所有的中文系统和国际化的软件都支持GB2312。</p>
<p><strong>GB2312</strong>的出现，基本满足了汉字的计算机处理需要，它所收录的汉字已经覆盖中国大陆99.75%的使用频率。对一些罕用字，GB2312不能处理，这导致了后来<strong>GBK(对GBK2312的扩展，但自身并非国家标准)<strong>及</strong>GB 18030</strong>汉字字符集的出现。</p>
<p><strong>GB 18030</strong>，全称：国家标准GB 18030-2005《信息技术 中文编码字符集》，是中华人民共和国现时最新的内码字集，是GB 18030-2000《信息技术 信息交换用汉字编码字符集 基本集的扩充》的修订版。与GB 2312-1980完全兼容，与GBK基本兼容，支持GB 13000及Unicode的全部统一汉字，共收录汉字70244个。</p>
<p>GB 18030的特点：</p>
<ul>
<li>与UTF-8相同，采用多字节编码，每个字可以由1个、2个或4个字节组成。</li>
<li>编码空间庞大，最多可定义161万个字符。</li>
<li>支持中国国内少数民族的文字，不需要动用造字区。</li>
<li>汉字收录范围包含繁体汉字以及日韩汉字</li>
</ul>
<h3 id="BIG5字符集-编码">BIG5字符集&amp;编码</h3>
<p><strong>Big5</strong>，又称为<strong>大五码</strong>或<strong>五大码</strong>，是使用繁体中文（正体中文）社区中最常用的电脑汉字字符集标准，共收录13,060个汉字。中文码分为内码及交换码两类，Big5属中文内码，知名的中文交换码有CCCII、CNS11643。Big5虽普及于台湾、香港与澳门等繁体中文通行区，但长期以来并非当地的国家标准，而只是<strong>业界标准</strong>。倚天中文系统、Windows等主要系统的字符集都是以Big5为基准。</p>
<p>Big5码是一套双字节字符集，使用了双八码存储方法，以两个字节来安放一个字。第一个字节称为&quot;高位字节&quot;，第二个字节称为&quot;低位字节&quot;。&quot;高位字节&quot;使用了0x81-0xFE，&quot;低位字节&quot;使用了0x40-0x7E，及0xA1-0xFE。</p>
<h3 id="Unicode">Unicode</h3>
<p><strong>Unicode是字符集，UTF-32/ UTF-16/ UTF-8是三种字符编码方案。</strong></p>
<p><strong>Unicode</strong>（<strong>统一码</strong>、<strong>万国码</strong>、<strong>单一码</strong>、<strong>标准万国码</strong>）。为表达任意语言的任意字符而设计。它使用4字节的数字来表达每个字母、符号，或者表意文字(ideograph)。每个数字代表唯一的至少在某种语言中使用的符号。nUnicode用数字0-0x10FFFF来映射这些字符，最多可以容纳1114112个字符，或者说有1114112个码位。</p>
<h4 id="UTF-32">UTF-32</h4>
<p>上述使用4字节的数字来表达每个字母、符号，或者表意文字(ideograph)，每个数字代表唯一的至少在某种语言中使用的符号的编码方案，称为UTF-32。UTF-32又称<strong>UCS-4</strong>是一种将Unicode字符编码的协定，对每个字符都使用4字节。就空间而言，是非常没有效率的。</p>
<p>这种方法有其优点，最重要的一点就是可以在常数时间内定位字符串里的第N个字符，因为第N个字符从第4×Nth个字节开始。虽然每一个码位使用固定长定的字节看似方便，它并不如其它Unicode编码使用得广泛。</p>
<h4 id="UTF-16">UTF-16</h4>
<p>尽管有Unicode字符非常多，但是实际上大多数人不会用到超过前65535个以外的字符。因此，就有了另外一种Unicode编码方式，叫做UTF-16(因为16位 = 2字节)。UTF-16将0–65535范围内的字符编码成2个字节，如果真的需要表达那些很少使用的&quot;星芒层(astral plane)&quot;内超过这65535范围的Unicode字符，则需要使用一些诡异的技巧来实现。UTF-16编码最明显的优点是它在空间效率上比UTF-32高两倍，因为每个字符只需要2个字节来存储（除去65535范围以外的），而不是UTF-32中的4个字节。</p>
<p>其编码方法是：</p>
<ul>
<li>如果字符编码U小于0x10000，也就是十进制的0到65535之内，则直接使用两字节表示；</li>
<li>如果字符编码U大于0x10000，由于UNICODE编码范围最大为0x10FFFF，从0x10000到0x10FFFF之间 共有0xFFFFF个编码，也就是需要20个bit就可以标示这些编码。用U’表示从0-0xFFFFF之间的值，将其前 10 bit作为高位和16 bit的数值0xD800进行 逻辑or 操作，将后10 bit作为低位和0xDC00做 逻辑or 操作，这样组成的 4个byte就构成了U的编码。</li>
</ul>
<h4 id="UTF-8">UTF-8</h4>
<p><strong>UTF-8</strong>（8-bit Unicode Transformation Format）是一种针对Unicode的可变长度字符编码（定长码），也是一种前缀码。它可以用来表示Unicode标准中的任何字符，且其编码中的第一个字节仍与ASCII兼容，这使得原来处理ASCII字符的软件无须或只须做少部份修改，即可继续使用。</p>
<p>互联网工程工作小组（IETF）要求所有互联网协议都必须支持UTF-8编码。</p>
<ul>
<li>UTF-8使用一至四个字节为每个字符编码：</li>
</ul>
<ol>
<li>
<p>128个US-ASCII字符只需一个字节编码（Unicode范围由U+0000至U+007F）。</p>
</li>
<li>
<p>带有附加符号的拉丁文、希腊文、西里尔字母、亚美尼亚语、希伯来文、阿拉伯文、叙利亚文及它拿字母则需要二个字节编码（Unicode范围由U+0080至U+07FF）。</p>
</li>
<li>
<p>其他基本多文种平面（BMP）中的字符（这包含了大部分常用字）使用三个字节编码。</p>
</li>
<li>
<p>其他极少使用的Unicode辅助平面的字符使用四字节编码。</p>
</li>
<li>
<p><strong>优点</strong></p>
</li>
</ol>
<p>​     UTF-8是ASCII的一个超集。因为一个纯ASCII字符串也是一个合法的UTF-8字符串，所以现存的ASCII文本不需要转换。为传统的扩展ASCII字符集设计的软件通常可以不经修改或很少修改就能与UTF-8一起使用。</p>
<p>使用标准的面向字节的排序例程对UTF-8排序将产生与基于Unicode代码点排序相同的结果。（尽管这只有有限的有用性，因为在任何特定语言或文化下都不太可能有仍可接受的文字排列顺序。）</p>
<p>UTF-8和UTF-16都是可扩展标记语言文档的标准编码。所有其它编码都必须通过显式或文本声明来指定。</p>
<p>任何面向字节的字符串搜索算法都可以用于UTF-8的数据（只要输入仅由完整的UTF-8字符组成）。但是，对于包含字符记数的正则表达式或其它结构必须小心。</p>
<p>UTF-8字符串可以由一个简单的算法可靠地识别出来。</p>
<p><strong>缺点</strong></p>
<p>因为每个字符使用不同数量的字节编码，所以寻找串中第N个字符是一个O(N)复杂度的操作 — 即，串越长，则需要更多的时间来定位特定的字符。同时，还需要位变换来把字符编码成字节，把字节解码成字符。</p>
<h2 id="PHP的一些转码函数">PHP的一些转码函数</h2>
<h3 id="iconv">iconv</h3>
<p>(PHP 4 &gt;= 4.0.5, PHP 5, PHP 7)</p>
<p>iconv — 字符串按要求的字符编码来转换</p>
<h4 id="说明">说明</h4>
<p>string <strong>iconv</strong> ( string <code>$in_charset</code> , string <code>$out_charset</code> , string <code>$str</code> )</p>
<p>将字符串 <code>str</code> 从 <code>in_charset</code> 转换编码到 <code>out_charset</code>。</p>
<h4 id="参数">参数</h4>
<ul>
<li>
<p><code>in_charset</code></p>
<p>输入的字符集。</p>
</li>
<li>
<p><code>out_charset</code></p>
<p>输出的字符集。如果你在 <code>out_charset</code> 后添加了字符串 <em>//TRANSLIT</em>，将启用转写（transliteration）功能。这个意思是，当一个字符不能被目标字符集所表示时，它可以通过一个或多个形似的字符来近似表达。 如果你添加了字符串 <em>//IGNORE</em>，不能以目标字符集表达的字符将被默默丢弃。 否则，会导致一个 <strong>E_NOTICE</strong>并返回 <strong>FALSE</strong>。</p>
<p><strong>Caution</strong>//TRANSLIT 运行细节高度依赖于系统的 iconv() 实现。 据悉，某些系统上的实现会直接忽略 <em>//TRANSLIT</em>，所以转换也有可能失败，<code>out_charset</code> 会是不合格的。</p>
</li>
<li>
<p><code>str</code></p>
<p>要转换的字符串。</p>
</li>
</ul>
<h4 id="返回值">返回值</h4>
<p>返回转换后的字符串， 或者在失败时返回 <strong>FALSE</strong>。</p>
<h4 id="用法">用法</h4>
<p>$text = iconv(“UTF-8”, “ISO-8859-1//TRANSLIT”, $text);</p>
<p>$text = iconv(“UTF-8”, “ISO-8859-1//IGNORE”, $text);</p>
<p>$text = iconv(“UTF-8”, “ISO-8859-1”, $text);</p>
<h3 id="mb-convert-encoding">mb_convert_encoding</h3>
<p>(PHP 4 &gt;= 4.0.6, PHP 5, PHP 7)</p>
<p>mb_convert_encoding — 转换字符的编码</p>
<h4 id="说明-2">说明</h4>
<p>string <strong>mb_convert_encoding</strong> ( string <code>$str</code> , string <code>$to_encoding</code>  [, mixed <code>$from_encoding</code> = mb_internal_encoding() ] )</p>
<p>将 string 类型 <code>str</code> 的字符编码从可选的 <code>from_encoding</code> 转换到 <code>to_encoding</code>。</p>
<h4 id="参数-2">参数</h4>
<p><code>str</code></p>
<p>要编码的 string。</p>
<p><code>to_encoding</code></p>
<p><code>str</code> 要转换成的编码类型。</p>
<p><code>from_encoding</code></p>
<p>在转换前通过字符代码名称来指定。它可以是一个 array 也可以是逗号分隔的枚举列表。 如果没有提供 <code>from_encoding</code>，则会使用内部（internal）编码。</p>
<p><a href="http://php.net/manual/zh/mbstring.supported-encodings.php">支持的编码</a>。</p>
<h4 id="返回值-2">返回值</h4>
<p>编码后的 string</p>
<h4 id="用法-2">用法</h4>
<p>$str = mb_convert_encoding($str, “SJIS”);</p>
<p>/* 将 EUC-JP 转换成 UTF-7 */</p>
<p>$str = mb_convert_encoding($str, “UTF-7”, “EUC-JP”);</p>
<p>/* 从 JIS, eucjp-win, sjis-win 中自动检测编码，并转换 str 到 UCS-2LE */</p>
<p>$str = mb_convert_encoding($str, “UCS-2LE”, “JIS, eucjp-win, sjis-win”);</p>
<p>/* “auto” 扩展成 “ASCII,JIS,UTF-8,EUC-JP,SJIS” */</p>
<p>$str = mb_convert_encoding($str, “EUC-JP”, “auto”);</p>
<h3 id="iconv和mb-convert-encoding的区别">iconv和mb_convert_encoding的区别</h3>
<p>1、iconv速度快，自然优先选择，但是他有个缺点，如果遇到自己不能转换的字符，就从那里截断。这就导致转码中内容被无故截断。</p>
<p>2、mb_convert_encoding函数效率比较低，但是他遇到无法转换的内容不会截断，这很大程度保留了内容的完整性。但是我发现比如内容有空格，转换出来的内容就有？符号，还是不够完美。</p>
<iframe src="/donate-page/index.html" style="overflow-x:hidden;overflow-y:hidden; border:0xp none #fff; min-height:240px; width:100%;"  frameborder="0" scrolling="no"></iframe>
]]></content>
  </entry>
  <entry>
    <title>centos7上nginx+PHP7.2的安装及配置</title>
    <url>/2018/09/20/centos7+nginx+php7/</url>
    <content><![CDATA[<p>centos7上nginx+PHP7.2的安装和一些配置（php和nginx）,以及centos的yum踩坑记录</p>
<h2 id="修改yum源">修改yum源</h2>
<p>国内使用centos默认的yum下载源非常慢，将其换为国内的阿里源-部署测试</p>
<ul>
<li>
<p>安装wget</p>
<pre><code class="language-nginx">sudo yum install wget
</code></pre>
</li>
<li>
<p>备份原始的更新源</p>
<pre><code class="language-nginx">cp /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.bak
</code></pre>
</li>
<li>
<p>下载并设置更新源为阿里源</p>
<pre><code class="language-nginx">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo
</code></pre>
</li>
<li>
<p>清理yum缓存</p>
<pre><code class="language-nginx">yum clean all
</code></pre>
</li>
<li>
<p>创建yum缓存</p>
<pre><code class="language-nginx">yum makecache
</code></pre>
</li>
</ul>
<h3 id="问题记录">问题记录</h3>
<p>在安装过程中会可能因本机dns解析遇到以下问题</p>
<p><img src="/uploads/Linux/yum_problem.png" alt="sources.list"></p>
<p><strong>解决方案</strong></p>
<ul>
<li>在<code>/etc/resolv.conf</code>中增加<code>nameserver 8.8.8.8</code></li>
<li>重新执行 <code>yum makecache</code></li>
</ul>
<h2 id="安装nginx">安装nginx</h2>
<ul>
<li>
<p>添加nginx源</p>
<pre><code class="language-nginx">rpm -Uvh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm
</code></pre>
</li>
<li>
<p>安装nginx</p>
<pre><code class="language-nginx">yum install nginx
</code></pre>
</li>
<li>
<p>启动nginx</p>
<pre><code class="language-nginx">systemctl start nginx
</code></pre>
</li>
<li>
<p>访问ip(本地127.0.0.1)，查看是否成功</p>
<p><img src="/uploads/Linux/nginx.png" alt="nginx"></p>
</li>
</ul>
<p>ok！</p>
<h2 id="安装PHP">安装PHP</h2>
<ul>
<li>
<p>添加PHP源</p>
<pre><code class="language-nginx">yum install epel-release
rpm -Uvh https://mirror.webtatic.com/yum/el7/webtatic-release.rpm
</code></pre>
</li>
<li>
<p>安装php 和 php-fpm</p>
<pre><code class="language-nginx">yum install php72w php72w-fpm
</code></pre>
</li>
</ul>
<h2 id="nginx配置">nginx配置</h2>
<ul>
<li>
<p>nginx的配置文件位于<code>/etc/nginx/conf.d</code>下</p>
<p>修改默认配置文件<code>default.conf</code>内容为</p>
<pre><code class="language-nginx">server &#123;
    listen       80;
    server_name  localhost;

    location / &#123;
        root   /usr/share/nginx/html;#项目根目录
        index  index.html index.htm index.php;
    &#125;

    error_page   500 502 503 504  /50x.html;
    location = /50x.html &#123;
        root   /usr/share/nginx/html;
    &#125;

    location ~ \.php$ &#123;
        root           html;
        fastcgi_pass   127.0.0.1:9000;
        fastcgi_index  index.php;
        fastcgi_param  SCRIPT_FILENAME  /usr/share/nginx/html$fastcgi_script_name;#根据项目根目录修改
        include        fastcgi_params;
    &#125;

&#125;
</code></pre>
</li>
<li>
<p>重启nginx</p>
<pre><code class="language-nginx">systemctl restart nginx
</code></pre>
</li>
<li>
<p>启动php-fpm</p>
<pre><code class="language-nginx">service start php-fpm
</code></pre>
</li>
<li>
<p>在<code>nginx</code>解析目录下添加php文件<code>test.php</code>内容如下</p>
<pre><code class="language-php">&lt;?php
    echo phpinfo();
?&gt;
</code></pre>
</li>
<li>
<p>访问<code>ip(本地127.0.0.1)/test.php</code> 页面如下</p>
<p><img src="/uploads/Linux/phpinfo_centos.png" alt=""></p>
</li>
</ul>
<p>大功告成！！！</p>
<iframe src="/donate-page/index.html" style="overflow-x:hidden;overflow-y:hidden; border:0xp none #fff; min-height:240px; width:100%;"  frameborder="0" scrolling="no"></iframe>
]]></content>
      <categories>
        <category>Environment</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>痰湿型脱发</title>
    <url>/2023/02/06/phlegmatic_hair_loss/</url>
    <content><![CDATA[<blockquote>
<p>资料来源：<a href="https://www.youtube.com/watch?v=NP9F09vNBsA">如何缓解“脱发”危机？先了解脱发的真正原因 20201206 |《健康之路》CCTV科教</a></p>
</blockquote>
<p>上大学后，个人生活更加的自由，所学专业：软件工程和不喜欢编制也决定了日后的工作肯定离不开晚睡早起，于是每日的作息紊乱，几点睡的都有，感觉自己又带有少许的神经衰弱和入睡困难症，有时特别的困，却一直睡不着。当时学长还开玩笑：“规律作息，每天量下自己的发际线，看是不是一直再往后移”，由于大学时期洗头掉的头发不是很多（正常人每日头发掉落数量不超过100根），而且轻拉多根头发，也并没有脱落（拉发测试），家族无秃头或地中海发型，认为我的基因决定自己不会越到脱发危机。</p>
<p>毕业工作后，虽然作息已算规律，但每天早上醒来，枕头上都着数量明显的头发，尤其是最近在家每次洗完头，洗脸池排水的速率都有明显的下降，拔出水槽滤网，上面全是自己头发，试意识到自己开始脱发了，拉发测试也证明了这个猜测，于是找了个科教视频，了解下自己脱发的原因，挽留剩下的还算茂密的头发。</p>
<p>该视频介绍的原因和相关症状刚好与我相吻合，于是此文章仅记录<strong>痰湿型脱发</strong>，其他原因并未深入了解。</p>
<h3 id="风险测试">风险测试</h3>
<ol>
<li>前一天不洗头，当天使用吸油纸吸头油，吸满三张以上为高风险</li>
<li>腰臀比：女性 &gt; 0.85，男性 &gt; 0.9 时为膏人（脂肪为痰湿的有形之痰），高风险。</li>
</ol>
<h3 id="相关症状">相关症状</h3>
<ol>
<li>头发油腻</li>
<li>头皮瘙痒</li>
<li>掉屑</li>
<li>红斑</li>
</ol>
<h3 id="深层原因">深层原因</h3>
<p>脾胃虚弱，痰湿</p>
<h3 id="注意事项">注意事项</h3>
<ol>
<li>清淡饮食，可吃土豆、山药等养脾胃的食物</li>
<li>运动，久坐会是脾胃的气滞住</li>
<li>规律作息，睡眠是脾胃的恢复阶段</li>
<li>洗头尽量不要特别勤快：皮脂腺是压力感受器，不停的分泌油脂，到达皮肤一定厚度后，就不分泌了，洗的越勤快，分泌的越快，会导致皮脂腺越来约发达，减少洗头的频率，可让皮脂腺分泌的少一点，慢慢协调</li>
</ol>
<h3 id="已有症状">已有症状</h3>
<ol>
<li>梅花针敲击<br>
敲击头维穴和风池穴，梅花针可使用不是很尖锐的木梳代替，使用梳子时，头维穴方向为从前到后，风池穴从上到下，从左到右都可以。</li>
<li>喝护发茶<br>
15g黄芪（补气，利尿）、10g薄盖灵芝（为头发提供营养）、躁的人可加入陈皮</li>
</ol>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>健康</tag>
        <tag>养生</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu上安装composer和Laravel</title>
    <url>/2018/10/15/ubuntu+laravel/</url>
    <content><![CDATA[<p>ubuntu上安装PHP框架laravel。</p>
<h2 id="准备">准备</h2>
<h3 id="服务器要求">服务器要求</h3>
<p>laravel框架对系统的要求可以用Laravel Homestead 虚拟机满足，如果不使用Homestead作为开发环境需要服务器符合以下要求：</p>
<blockquote>
<p>PHP &gt;= 7.0.0</p>
<p>PHP OpenSSL 扩展</p>
<p>PHP PDO 扩展</p>
<p>PHP Mbstring扩展</p>
<p>PHP Tokenizer 扩展</p>
<p>PHP XML 扩展</p>
</blockquote>
<h3 id="安装PHP扩展">安装PHP扩展</h3>
<p><img src="/uploads/laravel/php_laravel.png" alt=""></p>
<h3 id="安装配置composer">安装配置composer</h3>
<h4 id="安装composer">安装composer</h4>
<p>依次输入下面命令安装composer</p>
<pre><code>php -r &quot;copy('https://install.phpcomposer.com/installer','composer-setup.php');&quot;
</code></pre>
<p>下载安装脚本 <code> － composer-setup.php －</code> 到当前目录。</p>
<pre><code>php composer-setup.php执行安装过程
</code></pre>
<pre><code>php -r &quot;unlink('composer-setup.php');&quot;删除安装脚本
</code></pre>
<p>全局安装</p>
<pre><code>sudo mv composer.phar /usr/local/bin/composer
</code></pre>
<p>安装完以后查看composer版本 <strong>composer -v</strong></p>
<p><img src="/uploads/laravel/composer.png" alt="composer"></p>
<p>说明安装成功了。</p>
<h4 id="配置composer">配置composer</h4>
<p>修改composer的全局配置文件</p>
<pre><code>composer config -g repo.packagist composer https://packagist.phpcomposer.com
</code></pre>
<p>然后执行 <code>composer selfupdate</code></p>
<h2 id="安装配置laravel">安装配置laravel</h2>
<p>安装laravel</p>
<pre><code>composer global require &quot;laravel/installer=~1.1&quot;
</code></pre>
<p>配置laravel<br>
使用下面语句添加环境变量</p>
<pre><code>export PATH=&quot;~/.config/composer/vendor/bin:$PATH&quot;
</code></pre>
<p>并填加在 <code>/etc/bash.bashrc</code> 执行 <code>source ~/.bashrc</code> 让环境变量立即生效</p>
<p>然后就去 <code>/var/www</code>新建一个laravel项目</p>
<pre><code>laravel new laravel
</code></pre>
<p>在laravel new的时候会报几个文件没有权限，直接给777权限就OK了。</p>
<p>修改laravel目录权限</p>
<pre><code>sudo chown -R :www-data /var/www/laravel
sudo chmod -R 775 /var/www/laravel/storage
</code></pre>
<p>然后laravel就弄好了，可以开始表演了。</p>
<iframe src="/donate-page/index.html" style="overflow-x:hidden;overflow-y:hidden; border:0xp none #fff; min-height:240px; width:100%;"  frameborder="0" scrolling="no"></iframe>
]]></content>
      <categories>
        <category>Environment</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>Composer</tag>
        <tag>Laravel</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu16上nginx+PHP7.1+mysql的安装及配置</title>
    <url>/2018/09/15/ubuntu+nginx+PHP7.1+mysql/</url>
    <content><![CDATA[<p>ubuntu16.04上安装nginx+PHP7.1+mysql</p>
<h2 id="初始工作——换源">初始工作——换源</h2>
<p>换源就是更新软件的下载源，ubuntu如果没有换源的话，默认源是欧洲的，下载速度很慢，还有可能报一些404的错误，所以要换成国内的下载源，原来用的是清华的源，但是清华源在某大的时候可能会被墙，换成了较好的163源。</p>
<p>ubuntu的下载源在/etc/apt下的source.list中。</p>
<p><img src="/uploads/Linux/vim_sources.list.png" alt="sources.list"></p>
<p>把里面的内容备份后，换成163的源。</p>
<p>下面是ubuntu 16.04的163源</p>
<pre><code>deb http://mirrors.163.com/ubuntu/ xenial main restricted universe multiverse
deb http://mirrors.163.com/ubuntu/ xenial-security main restricted universe multiverse
deb http://mirrors.163.com/ubuntu/ xenial-updates main restricted universe multiverse
deb http://mirrors.163.com/ubuntu/ xenial-proposed main restricted universe multiverse
deb http://mirrors.163.com/ubuntu/ xenial-backports main restricted universe multiverse
deb-src http://mirrors.163.com/ubuntu/ xenial main restricted universe multiverse
deb-src http://mirrors.163.com/ubuntu/ xenial-security main restricted universe multiverse
deb-src http://mirrors.163.com/ubuntu/ xenial-updates main restricted universe multiverse
deb-src http://mirrors.163.com/ubuntu/ xenial-proposed main restricted universe multiverse
deb-src http://mirrors.163.com/ubuntu/ xenial-backports main restricted universe multiverse
</code></pre>
<p>保存，退出后，执行下面的命令更新。</p>
<p><img src="/uploads/Linux/update_apt.png" alt="update_apt"></p>
<h2 id="安装nginx">安装nginx</h2>
<p>apt源更新好以后，就可以安装 nginx了</p>
<p>sudo apt-get install nginx</p>
<p><img src="/uploads/Linux/install_nginx.png" alt="install_nginx"></p>
<p>安装好以后可以 nginx -v 看一下nginx的版本</p>
<p>这时候启动nginx 并设置开机启动</p>
<p><img src="/uploads/Linux/start_nginx.png" alt="nginx_start"></p>
<p>然后访问ip(本地127.0.0.1)，可以看到welcome to nginx</p>
<p><img src="/uploads/Linux/nginx.png" alt="nginx"></p>
<h2 id="安装PHP7-1">安装PHP7.1</h2>
<p>按以下命令安装PHP</p>
<p><img src="/uploads/Linux/php_install.png" alt="php_install"></p>
<p>安装后php -v 查看自己是否安装成</p>
<p><img src="/uploads/Linux/php-v.png" alt=""></p>
<p>这样PHP7.1就安装好了</p>
<h2 id="安装mysql">安装mysql</h2>
<p>然后安装mysql</p>
<p><img src="/uploads/Linux/mysql.png" alt=""></p>
<p>安装过程中会让输入root密码，切记啊！</p>
<p><img src="/uploads/Linux/mysql_install.png" alt=""></p>
<p>登入mysql<br>
然后使用  <code>Ctrl + D</code>    退出mysql</p>
<h2 id="nginx和PHP的配置">nginx和PHP的配置</h2>
<h3 id="配置PHP">配置PHP</h3>
<p>安装php-fpm</p>
<pre><code>sudo apt install php7.1-fpm
</code></pre>
<p>修改 <code>php.ini</code> 文件</p>
<pre><code>sudo  vim /etc/php/7.1/fpm/php.ini
</code></pre>
<p>将 <code>;cgi.fix_pathinfo=1</code> 修改为 <code>cgi.fix_pathinfo=0</code>（去掉注释） <code>/</code>  用于搜索</p>
<p>重启php7.1-fpm</p>
<pre><code>sudo service php7.1-fpm restart
</code></pre>
<h3 id="配置nginx">配置nginx</h3>
<p>Nginx的服务器配置文件在<br>
<code>/etc/nginx/sites-available</code>下</p>
<p>新增配置文件</p>
<pre><code>sudo vim /etc/nginx/sites-available/phpinfo
</code></pre>
<p>内容为</p>
<pre><code class="language-nginx">server &#123;
        listen 801;#项目监听端口
        listen [::]:801;

        root /var/www; #所要运行项目的根目录

        index index.html index.htm index.nginx-debian.html index.php;

        server_name _;

        location / &#123;
                try_files $uri $uri/ /index.php$is_args$query_string;
        &#125;

        location ~ \.php$ &#123;
                include snippets/fastcgi-php.conf;
                fastcgi_pass unix:/run/php/php7.1-fpm.sock;

        &#125;

&#125;

</code></pre>
<p>然后将其软链到<code>/etc/nginx/sites-enabled</code>下</p>
<pre><code class="language-nginx">sudo ln -s /etc/nginx/sites-available/phpinfo  /etc/nginx/sites-enabled/
</code></pre>
<p>重启 nginx</p>
<pre><code>sudo systemctl reload nginx
</code></pre>
<p>在<code>/var/www</code>下增加test.php文件</p>
<pre><code>sudo vim test.php
</code></pre>
<p>输入</p>
<pre><code class="language-php">&lt;?php
    echo phpinfo();
?&gt;
</code></pre>
<p>访问<code>192.168.33.10:801/test.php</code>可以看到</p>
<p><img src="/uploads/Linux/phpinfo.png" alt=""></p>
<p>已经配置成功啦！！！</p>
<iframe src="/donate-page/index.html" style="overflow-x:hidden;overflow-y:hidden; border:0xp none #fff; min-height:240px; width:100%;"  frameborder="0" scrolling="no"></iframe>
]]></content>
      <categories>
        <category>Environment</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>nginx</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>vagrant的安装&amp;简单的配置</title>
    <url>/2018/08/15/vagrant/</url>
    <content><![CDATA[<p>一般服务器上的运行环境都是Linux，如果开发者项目在本地 （windows）上运行正常的话，放到服务器上会出现一些bug，这是开发环境和生成环境不一致而造成的。这就需要一个和服务器运行环境一致的开发环境。当时打算做个双系统，在做之前组长推荐了vagrant虚拟机，发现内存占用并不是很大，而且还可以在开发的时候用Windows上的软件，非常的方便。</p>
<p>一段时间后组内人的vagrant的虚拟机由于种种扫操作，很多都烂掉了，重装的时候又遇到了各种各样的坑。作为为数不多的vagrant虚拟机还健在的人，被强迫又装了一个，记录了搭建vagrant环境的一些步骤和踩过的坑。</p>
<h2 id="提前准备">提前准备</h2>
<ul>
<li>
<p>先确保电脑已经在BIOS中开启了虚拟化技术（大部分Windows笔记本可以通过拿小针插电源插口旁的小孔进入BIOS设置。进入后在Configuration中将Intel Virtualization Technology改为Enable，然后保存并退出。）</p>
</li>
<li>
<p>安装<a href="https://www.virtualbox.org/wiki/Downloads">VirtualBox</a>下载后一路傻瓜式安装（不要安装最新版——来自组长的提醒 ）</p>
</li>
<li>
<p>安装<a href="https://www.vagrantup.com/">vagrant</a>下载后一路傻瓜式安装(先安装VirtualBox在安装vagrant)</p>
</li>
</ul>
<h2 id="vagrant-up-ssh">vagrant up &amp; ssh</h2>
<p>提前准备在做好以后就可以开始搞事情了。<br>
创建一个文件夹，命名为ubuntu。可以利用git bash、cmder或者cmd进入这个文件夹。然后选一个<a href="https://atlas.hashicorp.com/boxes/search">Vagrant Box</a>(我选的是Ubuntu 16.04，以此为例)</p>
<p><img src="/uploads/vagrant/vagrant_add_box.png" alt="add VagrantBox"></p>
<p>也可以迅雷下载box，然后添加到ubuntu文件夹中，然后 vagrant init box的名称<br>
接下啦，运行vagrant up启动虚拟机。将会非常漫长。<br>
<img src="/uploads/vagrant/vagrant_up.png" alt="vagrant up"><br>
up好以后打开VirtualBox客户端可以看到虚拟机已经正常启动。<br>
打开ubuntu会出有vagrantfile和.vagrant文件夹<br>
<img src="/uploads/vagrant/up_ok.png" alt=""><br>
up好以后就可以通过ssh访问虚拟机，部分电脑用git bash会出现这种情况<br>
<img src="/uploads/vagrant/git_ssh.png" alt=""><br>
很无奈，只好用cmd  ssh登录了<br>
<img src="/uploads/vagrant/cmd_ssh.png" alt=""><br>
到此，vagrant就安装好了。</p>
<h2 id="vagrant配置">vagrant配置</h2>
<h3 id="vagrant端口转发">vagrant端口转发</h3>
<p>在vagrantfile中取消下面几行的注释</p>
<p><img src="/uploads/vagrant/ip1.png" alt=""></p>
<p><img src="/uploads/vagrant/ip2.png" alt=""><br>
具体的vagrant的三种网络配置的作用可以参考这篇博文：<a href="http://blog.csdn.net/leonpengweicn/article/details/48263035">Vagrant 三种网络配置详解</a></p>
<h3 id="vagrant-共享文件夹">vagrant 共享文件夹</h3>
<p>在vagrantfile中进行修改<br>
<img src="/uploads/vagrant/vagrant_file.png" alt=""><br>
这样我就可以在把项目放在D盘的project下，然后在主机使用IDE写代码，在虚拟机中运行。<br>
<img src="/uploads/vagrant/shell.png" alt=""><br>
最后记得vagrant reload 重启vagrant，让vagrantfile里面的配置生效</p>
<h3 id="本机连接vagrant的mysql">本机连接vagrant的mysql</h3>
<p>修改 <code>mysql</code>的配置文件<code>my.cnf</code></p>
<p>ubuntu16.04应该在<code>/etc/mysql/mysql.conf.d</code></p>
<p>将<code>mysqld.cnf</code>中的<code>bind_address=127.0.0.1</code>修改为<code>bind_address=0.0.0.0</code></p>
<p>重启mysql</p>
<blockquote>
<p>sudo service mysql reload</p>
</blockquote>
<p>然后设置mysql允许远程访问</p>
<pre><code>mysql -u root -p
use mysql;
update user set host = '%' where user = 'root';
exit;
</code></pre>
<p>然后重启一下vagrant</p>
<p><img src="/uploads/vagrant/mysql.png" alt=""></p>
<p>Updating</p>
<iframe src="/donate-page/index.html" style="overflow-x:hidden;overflow-y:hidden; border:0xp none #fff; min-height:240px; width:100%;"  frameborder="0" scrolling="no"></iframe>
]]></content>
      <categories>
        <category>Environment</category>
      </categories>
      <tags>
        <tag>Vagrant</tag>
      </tags>
  </entry>
</search>
